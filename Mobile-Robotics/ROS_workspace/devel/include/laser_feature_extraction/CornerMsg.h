// Generated by gencpp from file laser_feature_extraction/CornerMsg.msg
// DO NOT EDIT!


#ifndef LASER_FEATURE_EXTRACTION_MESSAGE_CORNERMSG_H
#define LASER_FEATURE_EXTRACTION_MESSAGE_CORNERMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <laser_feature_extraction/LineMsg.h>
#include <laser_feature_extraction/LineMsg.h>

namespace laser_feature_extraction
{
template <class ContainerAllocator>
struct CornerMsg_
{
  typedef CornerMsg_<ContainerAllocator> Type;

  CornerMsg_()
    : p()
    , psi(0.0)
    , id(0)
    , l_a()
    , l_b()  {
    }
  CornerMsg_(const ContainerAllocator& _alloc)
    : p(_alloc)
    , psi(0.0)
    , id(0)
    , l_a(_alloc)
    , l_b(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p_type;
  _p_type p;

   typedef double _psi_type;
  _psi_type psi;

   typedef int32_t _id_type;
  _id_type id;

   typedef  ::laser_feature_extraction::LineMsg_<ContainerAllocator>  _l_a_type;
  _l_a_type l_a;

   typedef  ::laser_feature_extraction::LineMsg_<ContainerAllocator>  _l_b_type;
  _l_b_type l_b;





  typedef boost::shared_ptr< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CornerMsg_

typedef ::laser_feature_extraction::CornerMsg_<std::allocator<void> > CornerMsg;

typedef boost::shared_ptr< ::laser_feature_extraction::CornerMsg > CornerMsgPtr;
typedef boost::shared_ptr< ::laser_feature_extraction::CornerMsg const> CornerMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_feature_extraction::CornerMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_feature_extraction

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'laser_feature_extraction': ['/home/turtlebot/ros_workspace/src/laser_feature_extraction/msg'], 'visualization_msgs': ['/opt/ros/melodic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55a99cac39a2bb4bd0ca826dbb7a847e";
  }

  static const char* value(const ::laser_feature_extraction::CornerMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55a99cac39a2bb4bULL;
  static const uint64_t static_value2 = 0xd0ca826dbb7a847eULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_feature_extraction/CornerMsg";
  }

  static const char* value(const ::laser_feature_extraction::CornerMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point p\n\
float64 psi\n\
int32 id\n\
LineMsg l_a\n\
LineMsg l_b\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: laser_feature_extraction/LineMsg\n\
float64 A\n\
float64 B\n\
float64 C\n\
geometry_msgs/Point p_a\n\
geometry_msgs/Point p_b\n\
int32 id\n\
";
  }

  static const char* value(const ::laser_feature_extraction::CornerMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
      stream.next(m.psi);
      stream.next(m.id);
      stream.next(m.l_a);
      stream.next(m.l_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CornerMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_feature_extraction::CornerMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_feature_extraction::CornerMsg_<ContainerAllocator>& v)
  {
    s << indent << "p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "l_a: ";
    s << std::endl;
    Printer< ::laser_feature_extraction::LineMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.l_a);
    s << indent << "l_b: ";
    s << std::endl;
    Printer< ::laser_feature_extraction::LineMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.l_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_FEATURE_EXTRACTION_MESSAGE_CORNERMSG_H
