# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laser_feature_extraction/LineMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LineMsg(genpy.Message):
  _md5sum = "13328a699d80bf05ec8bf826fc92406c"
  _type = "laser_feature_extraction/LineMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 A
float64 B
float64 C
geometry_msgs/Point p_a
geometry_msgs/Point p_b
int32 id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['A','B','C','p_a','p_b','id']
  _slot_types = ['float64','float64','float64','geometry_msgs/Point','geometry_msgs/Point','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       A,B,C,p_a,p_b,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LineMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.A is None:
        self.A = 0.
      if self.B is None:
        self.B = 0.
      if self.C is None:
        self.C = 0.
      if self.p_a is None:
        self.p_a = geometry_msgs.msg.Point()
      if self.p_b is None:
        self.p_b = geometry_msgs.msg.Point()
      if self.id is None:
        self.id = 0
    else:
      self.A = 0.
      self.B = 0.
      self.C = 0.
      self.p_a = geometry_msgs.msg.Point()
      self.p_b = geometry_msgs.msg.Point()
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9di().pack(_x.A, _x.B, _x.C, _x.p_a.x, _x.p_a.y, _x.p_a.z, _x.p_b.x, _x.p_b.y, _x.p_b.z, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p_a is None:
        self.p_a = geometry_msgs.msg.Point()
      if self.p_b is None:
        self.p_b = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.A, _x.B, _x.C, _x.p_a.x, _x.p_a.y, _x.p_a.z, _x.p_b.x, _x.p_b.y, _x.p_b.z, _x.id,) = _get_struct_9di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9di().pack(_x.A, _x.B, _x.C, _x.p_a.x, _x.p_a.y, _x.p_a.z, _x.p_b.x, _x.p_b.y, _x.p_b.z, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p_a is None:
        self.p_a = geometry_msgs.msg.Point()
      if self.p_b is None:
        self.p_b = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.A, _x.B, _x.C, _x.p_a.x, _x.p_a.y, _x.p_a.z, _x.p_b.x, _x.p_b.y, _x.p_b.z, _x.id,) = _get_struct_9di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9di = None
def _get_struct_9di():
    global _struct_9di
    if _struct_9di is None:
        _struct_9di = struct.Struct("<9di")
    return _struct_9di
