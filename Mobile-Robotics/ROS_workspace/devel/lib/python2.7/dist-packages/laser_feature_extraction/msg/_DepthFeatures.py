# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laser_feature_extraction/DepthFeatures.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import laser_feature_extraction.msg
import geometry_msgs.msg
import std_msgs.msg

class DepthFeatures(genpy.Message):
  _md5sum = "de670e06a19a9ce51ae28733a6732dd1"
  _type = "laser_feature_extraction/DepthFeatures"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
LineMsg[] lines
CornerMsg[] corners

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: laser_feature_extraction/LineMsg
float64 A
float64 B
float64 C
geometry_msgs/Point p_a
geometry_msgs/Point p_b
int32 id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: laser_feature_extraction/CornerMsg
geometry_msgs/Point p
float64 psi
int32 id
LineMsg l_a
LineMsg l_b
"""
  __slots__ = ['header','lines','corners']
  _slot_types = ['std_msgs/Header','laser_feature_extraction/LineMsg[]','laser_feature_extraction/CornerMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lines,corners

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DepthFeatures, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lines is None:
        self.lines = []
      if self.corners is None:
        self.corners = []
    else:
      self.header = std_msgs.msg.Header()
      self.lines = []
      self.corners = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.lines:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.A, _x.B, _x.C))
        _v1 = val1.p_a
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.p_b
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(val1.id))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _v3 = val1.p
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_di().pack(_x.psi, _x.id))
        _v4 = val1.l_a
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.A, _x.B, _x.C))
        _v5 = _v4.p_a
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.p_b
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(_v4.id))
        _v7 = val1.l_b
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.A, _x.B, _x.C))
        _v8 = _v7.p_a
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = _v7.p_b
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(_v7.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lines is None:
        self.lines = None
      if self.corners is None:
        self.corners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lines = []
      for i in range(0, length):
        val1 = laser_feature_extraction.msg.LineMsg()
        _x = val1
        start = end
        end += 24
        (_x.A, _x.B, _x.C,) = _get_struct_3d().unpack(str[start:end])
        _v10 = val1.p_a
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = val1.p_b
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        self.lines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = laser_feature_extraction.msg.CornerMsg()
        _v12 = val1.p
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.psi, _x.id,) = _get_struct_di().unpack(str[start:end])
        _v13 = val1.l_a
        _x = _v13
        start = end
        end += 24
        (_x.A, _x.B, _x.C,) = _get_struct_3d().unpack(str[start:end])
        _v14 = _v13.p_a
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v15 = _v13.p_b
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v13.id,) = _get_struct_i().unpack(str[start:end])
        _v16 = val1.l_b
        _x = _v16
        start = end
        end += 24
        (_x.A, _x.B, _x.C,) = _get_struct_3d().unpack(str[start:end])
        _v17 = _v16.p_a
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v18 = _v16.p_b
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v16.id,) = _get_struct_i().unpack(str[start:end])
        self.corners.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.lines:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.A, _x.B, _x.C))
        _v19 = val1.p_a
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v20 = val1.p_b
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(val1.id))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _v21 = val1.p
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_di().pack(_x.psi, _x.id))
        _v22 = val1.l_a
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.A, _x.B, _x.C))
        _v23 = _v22.p_a
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = _v22.p_b
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(_v22.id))
        _v25 = val1.l_b
        _x = _v25
        buff.write(_get_struct_3d().pack(_x.A, _x.B, _x.C))
        _v26 = _v25.p_a
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v27 = _v25.p_b
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_i().pack(_v25.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lines is None:
        self.lines = None
      if self.corners is None:
        self.corners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lines = []
      for i in range(0, length):
        val1 = laser_feature_extraction.msg.LineMsg()
        _x = val1
        start = end
        end += 24
        (_x.A, _x.B, _x.C,) = _get_struct_3d().unpack(str[start:end])
        _v28 = val1.p_a
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v29 = val1.p_b
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        self.lines.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = laser_feature_extraction.msg.CornerMsg()
        _v30 = val1.p
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.psi, _x.id,) = _get_struct_di().unpack(str[start:end])
        _v31 = val1.l_a
        _x = _v31
        start = end
        end += 24
        (_x.A, _x.B, _x.C,) = _get_struct_3d().unpack(str[start:end])
        _v32 = _v31.p_a
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v33 = _v31.p_b
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v31.id,) = _get_struct_i().unpack(str[start:end])
        _v34 = val1.l_b
        _x = _v34
        start = end
        end += 24
        (_x.A, _x.B, _x.C,) = _get_struct_3d().unpack(str[start:end])
        _v35 = _v34.p_a
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v34.p_b
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v34.id,) = _get_struct_i().unpack(str[start:end])
        self.corners.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_di = None
def _get_struct_di():
    global _struct_di
    if _struct_di is None:
        _struct_di = struct.Struct("<di")
    return _struct_di
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
